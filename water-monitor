#!/usr/bin/python3

import RPi.GPIO as GPIO
import time
import os
from contextlib import ExitStack
from MQTTClient import MQTTClient
from PressureSensor import PressureSensor
from DataPublisher import DataPublisher
import configparser

# Setup GPIO
GPIO.setmode(GPIO.BCM)

# GPIO INPUT PINS
# GPIO 2 and 3 (pins 3 and 5) are used for I2C
# 
FIRE_FLOW = 17             # Pin 11
HOUSE_FLOW_PULSE = 27      # Pin 13
IRRIGATION_FLOW_PULSE = 22 # Pin 15

GPIO.setup(FIRE_FLOW, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(HOUSE_FLOW_PULSE, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(IRRIGATION_FLOW_PULSE, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

try:
    config = configparser.ConfigParser()
    config.read('water-monitor.ini')
    p = DataPublisher()
    mqtt = MQTTClient(p,config['MQTT']['Host'],
                        int(config['MQTT']['Port']),
                        config['MQTT']['Username'],
                        config['MQTT']['Password'])
    pressureSensor = PressureSensor()
    with ExitStack() as stack:
        p.EnterContext(stack)
        stack.enter_context(mqtt)
        stack.enter_context(pressureSensor)
        while True:
            # Report values of all GPIO inputs to the DataHandler
            p.fireFlowInput(GPIO.input(FIRE_FLOW))

            p.houseFlowInput(GPIO.input(HOUSE_FLOW_PULSE))
            p.irrigationFlowInput(GPIO.input(IRRIGATION_FLOW_PULSE))

            # Read Inlet/Outlet Pressures over I2C
            p.inletPressureInput(pressureSensor.inletPressure)
            p.outletPressureInput(pressureSensor.outletPressure)

            time.sleep(0.1)

except KeyboardInterrupt:
    GPIO.cleanup()
