#!/usr/bin/python3

import RPi.GPIO as GPIO
import time
import os
#from ADS1115 import ADS1115
from PulseUtils import ExponentiallyDampedMovingAverage
from contextlib import ExitStack

from MQTTClient import MQTTClient

import configparser


# ads1115 = ADS1115()

GPIO.setmode(GPIO.BCM)

# GPIO INPUT PINS
# GPIO 2 and 3 (pins 3 and 5) are used for I2C
# 
FIRE_FLOW = 17             # Pin 11
HOUSE_FLOW_PULSE = 27      # Pin 13
IRRIGATION_FLOW_PULSE = 22 # Pin 15

GPIO.setup(FIRE_FLOW, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(HOUSE_FLOW_PULSE, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(IRRIGATION_FLOW_PULSE, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

# Setup MQTT connection


# Pulse Counters will compute total, daily, and instant flows, and
# publish to MQTT in asynchronous threads
# The input() method must be called periodically with the value of
# the associated GPIO input. The rate at which this is called must
# be fast enough such that you don't miss two transitions of the
# signal. This will obviously depend on your use case.
class PulseCounter():
    def __init__(self):
        self.previousValue = 0
        self.pulseRateInput = 0
        self.pulseCount = 0
        self.gallonsPerPulse = 0.1
        self.pulseRate = ExponentiallyDampedMovingAverage(11,5000,500,self.getRateInput)
    
    def GetTotalVolume(self):
        return self.pulseCount * self.gallonsPerPulse
    def GetCurrentGPM(self):
        return self.pulseRate.getValueAsRate(60000) * self.gallonsPerPulse

    def getRateInput(self):
        value = self.pulseRateInput
        self.pulseRateInput = 0
        #print("getRateInput returns ", value)
        return value

    def Input(self, value):
        if value == 1 and self.previousValue == 0:
            # transitioned high
            self.pulseCount += 1
            self.pulseRateInput += 1
        self.previousValue = value
        # TODO check for and store maximum

class PressureSensorData:
    def __init__(self, topic, minSafe, maxSafe):
        self.topic = topic
        self.minSafe = minSafe
        self.maxSafe = maxSafe

        self.pressure = 0
        self.minPressure = 0
        self.maxPressure = 0

class FlowSensorData:
    def __init__(self, topic):
        self.topic = topic
        self.totalVolume = 0
        self.dailyVolume = 0
        self.dailyAverage = 0
        self.numDays = 0
        self.currentFlowRate = 0
        self.pulseCounter = PulseCounter()

    def GetCurrentGPM(self):
        return self.pulseCounter.GetCurrentGPM()
    def GetDailyVolume(self):
        return self.pulseCounter.GetTotalVolume()
    def GetDailyAverage(self):
        return self.dailyAverage
    def GetMaxGPM(self):
        return 0 # TODO input loop should track this

    def Input(self, input):
        self.pulseCounter.Input(input)
        # Check if this is a new day, and update dailys
        




class DataPublisher():
    # handle the stats data itself regarding all water and plumbing systems
    # decide when and what to publish to MQTT.
    #
    # Generally speaking, data is only published to MQTT when changes occur. All
    # data is published with retain=1 to allow instant display of current stats
    # on dashboard startup (or any client connection)
    #
    # This class is intended to sit in between the "input thread" and the
    # "publishing thread" This separates into two contexts the inputs vs the
    # decisions of what and when to publish.  This is important as the input
    # thread is very timing sensitive so as to not miss any signal transitions,
    # and since the publishing thread is dealing with MQTT communications (which
    # may block), these responsibilities must be handled in separate threads.
    def __init__(self):
        self.fireFlow = False
        self.houseFlow = FlowSensorData("water/houseFlow")
        self.irrigationFlow = FlowSensorData("water/irrigationFlow")
        self.inletPressure = PressureSensorData("water/inlet", 5, 40)
        self.outletPressure = PressureSensorData("water/outlet", 40, 90)

    def fireFlowInput(self, isFlowing):
        if (isFlowing and self.fireFlow == False):
            self.fireFlow = True # latches ON until explicitly cleared via MQTT
    
    def houseFlowInput(self, input):
        self.houseFlow.pulseCounter.Input(input)

    def irrigationFlowInput(self, input):
        self.irrigationFlow.pulseCounter.Input(input)

    def getMessagesToPublish(self):
        # TODO only publish what has changed
        # Returns an array of messages which can be published via paho MQTT's
        # "publish multiple"
        #
        # Create a list of all current pairs
        pairs = []
        pairs.append({'topic':"water/fireFlow",'payload':str(self.fireFlow)})
        pairs.append({'topic':"water/houseFlow/currentGPM",'payload':str(self.houseFlow.GetCurrentGPM())})
        pairs.append({'topic':"water/houseFlow/maxGPM",'payload':str(self.houseFlow.GetMaxGPM())})
        pairs.append({'topic':"water/houseFlow/dailyVolume",'payload':str(self.houseFlow.GetDailyVolume())})
        pairs.append({'topic':"water/houseFlow/dailyAverage",'payload':str(self.houseFlow.GetDailyAverage())})
        pairs.append({'topic':"water/irrigationFlow/currentGPM",'payload':str(self.irrigationFlow.GetCurrentGPM())})
        pairs.append({'topic':"water/irrigationFlow/maxGPM",'payload':str(self.irrigationFlow.GetMaxGPM())})
        pairs.append({'topic':"water/irrigationFlow/dailyVolume",'payload':str(self.irrigationFlow.GetDailyVolume())})
        pairs.append({'topic':"water/irrigationFlow/dailyAverage",'payload':str(self.irrigationFlow.GetDailyAverage())})
        # TODO add pressure related stuff
        
        msgs = []
        for x in pairs:
            x['qos'] = 1
            x['retain'] = True
            msgs.append(x)
        
        return msgs
    
        

        
try:
    config = configparser.ConfigParser()
    config.read('plumbing-monitor.ini')
    p = DataPublisher()
    mqtt = MQTTClient(p,config['MQTT']['Host'],
                        int(config['MQTT']['Port']),
                        config['MQTT']['Username'],
                        config['MQTT']['Password'])
    with ExitStack() as stack:
        stack.enter_context(p.houseFlow.pulseCounter.pulseRate)
        stack.enter_context(p.irrigationFlow.pulseCounter.pulseRate)
        stack.enter_context(mqtt)
        while True:
            # Report values of all GPIO inputs to the DataHandler
            p.fireFlowInput(GPIO.input(FIRE_FLOW))

            p.houseFlowInput(GPIO.input(HOUSE_FLOW_PULSE))
            p.irrigationFlowInput(GPIO.input(IRRIGATION_FLOW_PULSE))

            # TODO Read Inlet/Outlet Pressures over I2C
            
            time.sleep(0.1)

except KeyboardInterrupt:
    GPIO.cleanup()
